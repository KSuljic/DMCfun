Behavior Research Methods manuscript No.
(will be inserted by the editor)

DMCfun: An R package for ﬁtting Diﬀusion Model of Conﬂict
(DMC) to reaction time and error rate data
Ian G. Mackenzie · Carolin Dudschig

Received: date / Accepted: date

Abstract Decision processes within choice reaction-time (CRT) tasks are often modelled
using variations of a Diﬀusion Decision Model (DDM, for a review, see Ratcliﬀ and McKoon
(2008)). Ulrich, Schröter, Leuthold, and Birngruber (2015) introduced a Diﬀusion Model for
Conﬂict tasks (DMC). The DMC model combines common features from within standard
diﬀusion models with the addition of superimposed controlled and automatic activation. The
DMC model is used to explain distributional reaction time (and error rate) patterns in common behavioural conﬂict-like tasks (e.g., Flanker task, Simon task). This paper introduces
the R-package DMCfun, which implements the DMC model and provides functionality to ﬁt
the model to observed data.
Keywords reaction time · conﬂict task · Diﬀusion Model Conﬂict (DMC) · R package

1 Introduction
Conﬂict tasks (e.g., Flanker task, Simon task, Stroop task, see Eriksen & Eriksen, 1974; Lu
& Proctor, 1995; MacLeod, 1991), respectively) are common experimental paradigms used
to investigate decision processes under response competition (i.e., the activation of competing response alternatives). Such conﬂict tasks involve stimuli with multiple features that
are either relevant or irrelevant to the required task. For example, a typical Flanker task
consists of an array (e.g., HHHHH, HHSHH) with the central item being the “target” (taskrelevant) and the surrounding items being the “ﬂankers”(task-irrelevant). Responses are typically mapped to the left and right hand (e.g., H = left, S = right). When the target and the
ﬂankers match (mismatch), both the relevant and irrelevant dimensions indicate the same
(diﬀerent) response. In a typical Simon task, participants respond to a feature of a stimulus
(e.g., colour, shape; relevant dimension) that is presented at diﬀerent spatial locations (e.g.,
left vs. right side of the screen; irrelevant dimension). Again, responses are mapped to the
Ian G. Mackenzie
Schleichstrasse 4, Rm 4.427
Tübingen
Germany
Tel.: +49 (0)7071 29-75589
E-mail: ian.mackenzie@uni-tuebingen.de

2

Ian G. Mackenzie, Carolin Dudschig

left and right hands (e.g., blue = left, red = right). When a stimulus presented in a left (right)
location requires a left-hand response, the relevant and irrelevant stimulus dimensions match
(mismatch). In such tasks, responses are typically faster and less error-prone when the relevant and irrelevant response dimensions indicate the same response (compatible) than when
they indicate diﬀerent responses (incompatible). The longer reaction time and larger error
rate in incompatible trials indicates that task-irrelevant information interferes with the processing of the task relevant information.
This compatibility eﬀect pattern is consistent across all conﬂict-like tasks. However,
when the size of the eﬀect (incompatible - compatible) is compared across diﬀerent percentiles of the RT distribution, diﬀerent patterns can emerge. Such diﬀerences across the RT
distribution are investigated via the use of delta functions (or delta plots) (De Jong, Liang,
& Lauber, 1994; Speckman, Rouder, Morey, & Pratte, 2008). Such plots depict the compatibility eﬀect (y-axis) at n bins (x-axis) (see Figure 1 bottom-right panel for an example of a
delta plot). Such distributional analyses have indicated that the compatibility eﬀect in some
conﬂict tasks (e.g., Stroop task) increases with slower responses (i.e., positive-going delta
slope) whereas in other conﬂict tasks (e.g., Simon task) smaller compatibility eﬀects are observed with slower responses (i.e., negative-going delta slope) (see Pratte, Rouder, Morey,
& Feng, 2010, for Stroop and Simon tasks).
The observation of both positive and negative-going delta slopes across diﬀerent conﬂict
tasks has strong theoretical implications for processing models of RT. For example, traditional diﬀusion models of RT cannot account for negative-going delta functions (Pratte et
al., 2010). These models propose that task-relevant information accumulates over time until
one of two decision boundaries is reached (correct vs. incorrect response boundary). Wagenmakers and Brown (2007) demonstrate that the positive relationship between the mean and
standard deviation of RT excludes the possibility of observing negative-going delta functions. As summarized by Ulrich et al. (2015), traditional RT models have diﬃculty explaining negative-going delta functions. The DMC model is an extension of the standard diﬀusion
model that can explain observed delta functions (both positive and negative going) across a
range of conﬂict tasks. Since its publication, simulation and ﬁtting procedures of the DMC
model have been applied in various research context in order to provide important insights
into the mechanisms at play in conﬂict tasks(e.g., Mittelstädt & Miller, 2020; Servant, White,
Montagnini, & Burle, 2016).
Conditional accuracy functions (CAFs) also oﬀer an additional tool with which to investigate compatibility eﬀects across the RT distribution. Here, accuracy rates are calculated
across N equally sized RT bins. For compatible trials, accuracy is typically high across all
bins, whereas for incompatible trials, the lowest level of accuracy is observed at fastest RT
bins. At the slowest RT bins, there is little diﬀerence in accuracy between compatible and
incompatible conditions.
The following section introduces the DMC model Ulrich et al. (2015). It must be noted
that other extensions of standard drift diﬀusion models with speciﬁc reference to conﬂictlike tasks have been proposed. For example, the dual-stage two-phase model (DSTP; Hübner,
Steinhauser, and Lehle (2010)) or the shrinking spotlight model (SSP; White, Ratcliﬀ, and
Starns (2011)). A direct comparison between such models is beyond the scope of the current paper with such comparisons provided elsewhere (see Evans & Servant, 2020; White,
Servant, & Logan, 2018, albeit with speciﬁc reference to the ﬂanker task only).

DMCfun

3

1.1 DMC Model Details
The DMC model of Ulrich et al. (2015) builds upon the idea that conﬂict tasks consist of two
processes that proceed in parallel (automatic and controlled processing). Here, controlled
processing concerns the task-relative information, whereas automatic processing concerns
the task-irrelevant information. Whilst the architecture of such combined controlled/automatic processing within individual conﬂict tasks is under-speciﬁed, Ulrich et al. (2015) suggest two possible architectures (see Figure 1 Ulrich et al., 2015) under which automatic and
controlled processing interact. Under both architectures, DMC assumes that a single accumulation process (combined automatic and controlled) determines the executed response.
Critically, automatic processes will facilitate (impede) controlled processes in compatible
(incompatible) trials. In addition, it is assumed that the activation output from automatic
processes increases to a maximum before decreasing back to zero (pulse function).
The formal model speciﬁcation for DMC is provided in Ulrich et al. (2015) and thus, will
only be brieﬂy described here. The time-course of automatic activation is modelled using a
Gamma density function with a shape parameter (aaShape, with α > 1) and a scale parameter
(tau, τ ) multiplied by a constant (amp, +ve for compatible, -ve for incompatible trials), with
the drift rate (mu, µ) being the ﬁrst derivative of the density function. This gives DMC 7
parameters that can vary: amp, aaShape, tau, mu, bnds, resMean, and resSD. Like standard
diﬀusion models (see Ratcliﬀ, 2013), DMC also allows increased trial-to-trial variability
by allowing the starting point to vary. This starting point is sampled from a general beta
distribution (spShape α > 0) centered around zero within the boundary range. DMC assumes
that total RT is a combination of decision (D) and residual non-decision (R) processes and
assumes that compatibility eﬀects inﬂuence D processes only. The predictions of DMC are
independent of the distributional properties of R. However, to provide more realistic RTs,
the non-decisional component (R) was sampled from a normal distribution with a given
mean and standard deviation. Within the DMC model, activation accumulates over t (t >
0), with t being the time since stimulus onset. Xc (t) represents represents the accumulation
of noisy information from controlled processes, whereas Xa (t) is the accumulation of noisy
information from automatic processes. For controlled activation, drift rate (µc ) is assumed
to be time-independent, whereas for automatic activation, drift rate (µa ) depends on t. The
critical assumption is that total accumulation of information is the sum of the controlled and
automatic processes (X(t) = Xc (t) + Xa (t)) since it is assumed that automatic activation spills
over to the controlled process. Responses are generated whenever total activation exceeds
some boundary (b).
Figure 1 (top-left panel) illustrates the model dynamics for automatic and controlled
activation averaged over 100,000 compatible and incompatible trials. The solid black line
represents controlled activation. The green and red dotted lines represent automatic activation in compatible and incompatible trials, respectively. Critically, the automatic activation
induced by the task-irrelevant dimension is brief and time-dependent. The solid green and
red lines represent the summed automatic and controlled activation. For compatible trials,
automatic and controlled activation both accumulate in the same direction as the correct
response, whereas for incompatible trials, automatic and controlled activation produce opposite activation levels. This results in delayed boundary level activation for incompatible
compared to compatible trials.
Ulrich et al. (2015) collected data from both a ﬂanker task and a simon task and ﬁtted
this data to DMC. Here, the delta (RT) and CAF (accuracy) values from the observed and
predicted data were calculated. The model was ﬁtted by minimising the root-mean-square

4

Ian G. Mackenzie, Carolin Dudschig

Fig. 1 DMC simulation. This simulation involved 100,000 trials for each compatibility condition with the
following default simulation parameters: amp = 20, tau = 30, mu = 0.5, bnds = 75, resMean = 300, resSD =
30, aaShape = 2. The upper-left panel shows the mean activation functions with the black line representing
controlled activation. The dotted green and red lines represent the automatic activation for compatible and
incompatible trials, respectively. The solid green and red lines represent the sum of controlled and compatible
and incompatible automatic activation, respectively. The bottom left panels shows 5 individual compatible and
incompatible trials. A response is generated when activation exceeds the boundary level (horizontal straight
lines). The right upper two panels show the probability distribution function (PDF) and the cumulative distribution function (CDF) for both compatible and incompatible trials. The middle right panel show the conditional accuracy function (CAF) for compatible and incompatible trials. The bottom right panel show the delta
function for the compatibility eﬀect (incompatible - compatible).

error (RMSE) weighted diﬀerence between the predicted and observed delta and CAF values
using the SIMPLEX minimization routine of Nelder and Mead (1965).

2 R Package: DMCfun
The R-package DMCfun provides functionality allowing both the simulation of the DMC
model and ﬁtting the model to observed data. The simulation code is written in C++ utilising the R-package Rcpp (Eddelbuettel et al., 2011). The use of C++ gives a signiﬁcant
performance boost over base R whilst the Rcpp interface allows convienient use from within
the standard R environment and also direct access to plotting facilities within R. The ﬁtting
procedure uses the R-package optimr Nash (2016) with method = "Nelder-Mead". As in Ulrich et al. (2015) the model ﬁt was evaluated by calculating the RMSE weighted diﬀerence
between the predicted and observed delta/CAF values. The following sections will provide a

DMCfun

5

tutorial-type overview of using the package, both for running the basic simulation and also
ﬁtting the observed data from Ulrich et al. (2015).

2.1 Gettting Started
The package is currently hosted on GitHub (https://github.com/igmmgi/DMCfun). It is anticipated that the package will also be submitted to the R CRAN repository. The package can
be installed directly from GitHub using the devtools package (via install_github, see Code
Example 1).
R Code Example 1: instalation
>
>
>
>

# install.packages("devtools")
devtools::install_github("igmmgi/DMCfun")
library(DMCfun)
help(package = "DMCfun")

2.2 DMC Simulation
The simulation code is within the functions dmcSim (see Code Example 2). The function
dmcSim() allows the user to specify parameter values using named arguments (?dmcSim). A
single simulation run with 100,000 trials in each compatibility condition takes approximately
< 150 ms (standard desktop PC). The function dmcSims allows the user to specify a list
of input parameters in order to run multiple simulations. For example, Ulrich et al. (2015)
observed that the parameter tau (τ ) largely determined the slope to the delta function. In
Code Example 3, the DMC simulation is run using tau starting parameters from 20 to 170
in steps of 10 (see Figure 2).
R Code Example 2
>
>
>
>
>
>
>
>

dmc <- dmcSim(fullData = TRUE)
# Fig 3 from Ulrich et al. (2015)
dmc <- dmcSim(fullData = TRUE, tau = 150) # Fig 4 from Ulrich et al. (2015)
plot(dmc)
plot(dmc, figType = "caf")
plot(dmc, figType = "delta")
dmc <- dmcSim()
plot(dmc)
# Fig 3 from Ulrich et al.

2.3 DMC Fit: Real data
The package includes the raw data from Ulrich et al. (2015) (see Code Example 4). This data
can be ﬁtted to DMC via the function dmcFitAgg (see Code Example 5). This will ﬁt DMC to
the data averaged across all participants, whereas the function dmcFitVPs will ﬁt DMC to individual participants. A summary of the ﬁt is provided. By default, dmcFit* ﬁts the following
parameters: amp, tau, mu, bnds, resMean, resSD, aaShape, spShape. The function dmcFit*

6

Ian G. Mackenzie, Carolin Dudschig

Fig. 2 DMC Simulation delta functions with varying tau parameter only.

uses the R-package optimr Nash (2016) with method = "Nelder-Mead" and allow the speciﬁcation of a number of options including which parameters to ﬁt and their starting values.
Ulrich et al. (2015) observed that model ﬁt was highly inﬂuenced by the tau parameter. The
function dmcFit* ﬁrst searches a grid space (N = 10) within this single parameter to ﬁnd
the "best" starting value of tau before the simplex minimisation routine is implemented. An
initial search of a parameter space has been shown to improve parameter recovery (Hübner
& Pelzer, 2020). Such a initial search grid and subsequent ﬁtting procedure takes < 1 minute.
It is also possible to search the initial grid space across multiple parameters with the search
space being determined by the input arguments minVals, maxVals, and ﬁtInitialGridN. It
should be noted that increasing the size of the initial grid space will increase computational
time prior to the simplex minimisation routine dramatically. For example, searching 6 parameters within a gridspace of 6, results in 46,656 initial parameter sets. Although these are
independent and are run in parallel, such an initial grid space takes approximately 20 minutes (tested on 12 core desktop PC). As a result, the default setting is to perform the initial
search in the tau space only. Such a procedure produced consistently good ﬁts with the data
of Ulrich et al. (2015) (RMSE < 15), although this does not exclude the possibility that other
datasets would beneﬁt from an extended search grid (or alternative starting values) regarding
the initial values for the simplex routine.

DMCfun

7

R Code Example 3
> dmc <- dmcSims(list(tau = seq(20,170,10)))
> plot(dmc[[1]]) # full plot first combination
> plot(dmc)
# plot delta functions for each combination

Users can ﬁt DMC to their own data using the function dmcObservedData (see Code
Example 6). This function takes an R dataframe (or a *.txt ﬁle with tab separated values,
one header line) (see Table 1) and calculates the required variables. Four data columns are
required: one for participant number, one for compatibility, one for reaction time, and one for
error rate. The speciﬁc column names and column codings can be speciﬁed using function
arguments.

R Code Example 4
flankerDataRaw
flankerData
flankerData$summary
plot(flankerData)
simonDataRaw
simonData
simonData$summary
plot(simonData)

# raw flanker data
# summarised flanker data
# aggregated flanker data
# raw simon data
# summarised simon data
# aggregated simon data

R Code Example 5
> fit<-dmcFitAgg(flankerData) # flanker data from Ulrich et al. (2015)
> plot(fit,flankerData)
> summary(fit)
# output values from flanker data
# A tibble: 1 x 9
amp
tau
mu bnds resMean resSD aaShape spShape rmse
<dbl> <dbl> <dbl> <dbl>
<dbl> <dbl>
<dbl>
<dbl> <dbl>
1 17.7 106. 0.599 55.7
326. 28.8
2.02
3.04 7.50
> fit<-dmcFitAgg(simonData) # simon data from Ulrich et al. (2015)
> plot(fit,simonData)
> summary(fit)
# output values from simon data
# A tibble: 1 x 9
amp
tau
mu bnds resMean resSD aaShape spShape rmse
<dbl> <dbl> <dbl> <dbl>
<dbl> <dbl>
<dbl>
<dbl> <dbl>
1 17.9 27.9 0.595 58.1
315. 31.5
2.32
3.20 11.6

8

Ian G. Mackenzie, Carolin Dudschig

R Code Example 6
> ?dmcObservedData
> datOb <- dmcObservedData(datframe,
columns = c("SNo","comp","rt","err"),
compCoding = c(1, 2),
errorCoding = c(0, 1))
> plot(datOb)
> dmcFit <- dmcFitAgg(datOb)
> plot(dmcFit,datOb)

Table 1: Raw Data ﬁle example
VP
1
1
1
1
1
1

Comp
comp
comp
comp
incomp
comp
incomp

RT
601.657
451.429
418.097
451.436
401.312
434.749

Error
0
0
0
0
0
0

Fig. 3 DMC Fit from the Flanker data presented in Ulrich, Schröter, Leuthold, and Birngruber (2015). Refer
to Code Example 5.

DMCfun

9

Fig. 4 DMC Fit from the Simon data presented in Ulrich, Schröter, Leuthold, and Birngruber (2015). Refer
to Code Example 5.

3 Conclusions
To summarize, the R-package DMCfun provides users with an easy-to-use interface for both
simulating the DMC model with various input parameters and ﬁtting this model to observed
behavioural data from within conﬂict-like tasks.
Acknowledgements We would like to thank Rolf Ulrich for providing the raw data from Ulrich et al. (2015)
and Rolf Ulrich, Hartmut Leuthold, and Victor Mittelstädt for providing valuable comments on an earlier draft
of this manuscript.

Conﬂict of interest
The authors declare that they have no conﬂict of interest.
The code and data used are available at https://github.com/igmmgi/DMCfun
References
De Jong, R., Liang, C.-C., & Lauber, E. (1994). Conditional and unconditional automaticity:
A dual-process model of eﬀects of spatial stimulus-response correspondence. Journal
of Experimental Psychology: Human Perception and Performance, 20, 731–750.

10

Ian G. Mackenzie, Carolin Dudschig

Eddelbuettel, D., François, R., Allaire, J., Ushey, K., Kou, Q., Russel, N., . . . Bates, D. (2011).
Rcpp: Seamless R and C++ integration. Journal of Statistical Software, 40, 1–18.
Eriksen, B. A., & Eriksen, C. W. (1974). Eﬀects of noise letters upon the identiﬁcation of a
target letter in a nonsearch task. Perception & Psychophysics, 16, 143–149.
Evans, N. J., & Servant, M. (2020). A comparison of conﬂict diﬀusion models in the ﬂanker
task through pseudolikelihood bayes factors. Psychological Review, 127, 114–135.
Hübner, R., & Pelzer, T. (2020). Improving parameter recovery for conﬂict drift-diﬀusion
models. Behavior Research Methods, 1–19.
Hübner, R., Steinhauser, M., & Lehle, C. (2010). A dual-stage two-phase model of selective
attention. Psychological Review, 117, 759–784.
Lu, C.-H., & Proctor, R. W. (1995). The inﬂuence of irrelevant location information on performance: A review of the simon and spatial stroop eﬀects. Psychonomic Bulletin &
Review, 2, 174–207.
MacLeod, C. M. (1991). Half a century of research on the stroop eﬀect: An integrative review.
Psychological Bulletin, 109, 163–203.
Mittelstädt, V., & Miller, J. (2020). Beyond mean reaction times: Combining distributional
analyses with processing stage manipulations in the simon task. Cognitive Psychology,
119, 101275.
Nash, J. C. (2016). optimr: A replacement and extension of the ’optim’ function. Retrieved
from https://CRAN.R-project.org/package=optimr
Nelder, J. A., & Mead, R. (1965). A simplex method for function minimization. The Computer Journal, 7, 308–313.
Pratte, M. S., Rouder, J. N., Morey, R. D., & Feng, C. (2010). Exploring the diﬀerences in
distributional properties between stroop and simon eﬀects using delta plots. Attention,
Perception, & Psychophysics, 72, 2013–2025.
Ratcliﬀ, R. (2013). Parameter variability and distributional assumptions in the diﬀusion
model. Psychological Review, 120, 281–292.
Ratcliﬀ, R., & McKoon, G. (2008). The diﬀusion decision model: Theory and data for twochoice decision tasks. Neural Computation, 20, 873–922.
Servant, M., White, C., Montagnini, A., & Burle, B. (2016). Linking theoretical decisionmaking mechanisms in the simon task with electrophysiological data: A model-based
neuroscience study in humans. Journal of Cognitive Neuroscience, 28, 1501–1521.
PMID: 27315275. doi:10.1162/jocn\_a\_00989. eprint: https://doi.org/10.1162/jocn_
a_00989
Speckman, P. L., Rouder, J. N., Morey, R. D., & Pratte, M. S. (2008). Delta plots and coherent
distribution ordering. The American Statistician, 62, 262–266.
Ulrich, R., Schröter, H., Leuthold, H., & Birngruber, T. (2015). Automatic and controlled
stimulus processing in conﬂict tasks: Superimposed diﬀusion processes and delta
functions. Cognitive Psychology, 78, 148–174.
Wagenmakers, E.-J., & Brown, S. (2007). On the linear relation between the mean and the
standard deviation of a response time distribution. Psychological Review, 114, 830–
841.
White, C. N., Ratcliﬀ, R., & Starns, J. J. (2011). Diﬀusion models of the ﬂanker task: Discrete
versus gradual attentional selection. Cognitive Psychology, 63, 210–238.
White, C. N., Servant, M., & Logan, G. D. (2018). Testing the validity of conﬂict driftdiﬀusion models for use in estimating cognitive processes: A parameter-recovery study.
Psychonomic Bulletin & Review, 25, 286–301.

